kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: example-pipeline
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
  tasks:
    - name: task-1
      description: Placeholder task that prints the Snapshot and outputs standard TEST_OUTPUT
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
      taskSpec:
        params:
          - name: SNAPSHOT
        results:
          - name: TEST_OUTPUT
            description: Test output
        steps:
          - image: registry.redhat.io/openshift4/ose-cli:latest
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
            script: |
              #!/bin/bash
              set -e
              
              # Install 'jq' for JSON processing
              dnf -y install jq
              
              # Extract all components from the SNAPSHOT JSON array
              snapshotComponents=$(jq -c '.components[]' <<< "${SNAPSHOT}")
              
              echo -e "Example test task for the Snapshot:\n ${SNAPSHOT}"
              
              # Loop through each component in the snapshot
              while read componentEntry
              do
              # Variables
              componentName=$(echo "${componentEntry}" | jq -r '.name')
              # Note: 'source.git.url' and 'source.git.revision' are usually present in a real H-A-C snapshot
              componentUrl=$(echo "${componentEntry}" | jq -r '.source.git.url') 
              componentUrlWithoutSuffix=$(echo $componentUrl | sed 's/\.git$//')
              componentSha=$(echo "${componentEntry}" | jq -r '.source.git.revision')

              echo "--- Component Information ---"
              echo "Component Name: ${componentName}"
              echo "Git URL: ${componentUrl}"
              echo "URL without .git: ${componentUrlWithoutSuffix}"
              echo "Git SHA: ${componentSha}"
              echo "---------------------------"

              # Add more testing logic here (e.g., security scan, linting, etc.)
              
              done < <(echo "$snapshotComponents")
              
              # After the tests finish, record the overall result
              RESULT="SUCCESS"
              
              # Output the standardized TEST_OUTPUT result in JSON form
              TEST_OUTPUT=$(jq -rc \
                --arg date $(date -u --iso-8601=seconds) \
                --arg RESULT "${RESULT}" \
                --null-input \
                '{result: $RESULT, timestamp: $date, failures: 0, successes: 1, warnings: 0}')
              
              # Print the result to stdout and write to the Tekton result path
              echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)